# name: Hprofile Actions
# on: 
#   workflow_dispatch:
#   push:
#     branches:
#       - main
    
# jobs: 
#   Testing:
#     runs-on: ubuntu-latest
#     steps: 
#       - name: Code Checkout
#         uses: actions/checkout@v4.2.2
#       - uses: actions/setup-java@v4
#         with:
#           distribution: 'corretto' # See 'Supported distributions' for available options
#           java-version: '11'
#       # - uses: whelk-io/maven-settings-xml-action@v22
#       #   with:
#       #     plugin_repositories: '[{ "id": "nexus-codehaus-snapshot", "url": "https://oss.sonatype.org/content/repositories/codehaus-snapshots/" }]'
#       - run: mvn --version
#       - run: |
#          ls -l /home/runner/.m2
         
#       - name: Maven test
#         run: |
#           mvn test
#           mvn install
#           ls -l /home/runner/.m2/repository
#           ls -l /home/runner/.m2/repository/org
#           ls -l /home/runner/.m2/repository/org/apache
#           ls -l /home/runner/.m2/repository/org/apache/maven
#           ls -l /home/runner/.m2/repository/org/apache/maven/plugins
#           echo "next"
#           ls -l /home/runner/.m2/repository/com/puppycrawl/tools

      
#       - name: checkstyle
#         run: |
#           ls -l
#           mvn checkstyle:checkstyle

        


name: Hprofile Actions
on: 
  workflow_dispatch:
  push:
    branches:
      - main
jobs: 
   Testing:
      runs-on: ubuntu-latest
      steps:
        - name: Code checkout
          uses: actions/checkout@v4.2.2

        - name: Maven Test
          run: mvn test
          
        - name: Checkstyle
          run: mvn checkstyle:checkstyle  

        - name: Set Java 17
          uses: actions/setup-java@v4
          with:
            distribution: 'temurin' # See 'Supported distributions' for available options
            java-version: '17'
      
            
        # Setup sonar-scanner
        - name: Setup SonarQube
          uses: warchant/setup-sonar-scanner@v7

        # Run sonar-scanner
        # - name: SonarQube Scan
        #   run: sonar-scanner
        #      -Dsonar.host.url=${{ vars.SONAR_URL }} 
        #      -Dsonar.token=${{ secrets.SONAR_TOKEN }} 
        #      -Dsonar.organization=${{ vars.SONAR_ORGANIZATION }}
        #      -Dsonar.projectKey=${{ vars.SONAR_PROJECT_KEY }}
        #      -Dsonar.sources=src/ 
        #      -Dsonar.junit.reportsPath=target/surefire-reports/
        #      -Dsonar.jacoco.reportsPath=target/jacoco.exec
        #      -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
            #  -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/

        - name: SonarQube Scan
          uses: SonarSource/sonarqube-scan-action@master
          env:
            SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
            SONAR_HOST_URL: ${{ vars.SONAR_URL }}
          with: >
             -Dsonar.projectKey=${{ vars.SONAR_PROJECT_KEY }}
             -Dsonar.sources=src/ 
             -Dsonar.junit.reportsPath=target/surefire-reports/
             -Dsonar.jacoco.reportsPath=target/jacoco.exec
             -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
             -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/


        - run: |
            ls -l
            ls -l target

        - name: SonarQube Quality Gate check
          id: sonarqube-quality-gate-check
          uses: sonarsource/sonarqube-quality-gate-action@master
          with:
             pollingTimeoutSec: 600
          env:
             SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
             SONAR_HOST_URL: ${{ vars.SONAR_URL }} #OPTIONAL
