# name: Hprofile Actions
# on: 
#   workflow_dispatch:
#   push:
#     branches:
#       - main
    
# jobs: 
#   Testing:
#     runs-on: ubuntu-latest
#     steps: 
#       - name: Code Checkout
#         uses: actions/checkout@v4.2.2
#       - uses: actions/setup-java@v4
#         with:
#           distribution: 'corretto' # See 'Supported distributions' for available options
#           java-version: '11'
#       # - uses: whelk-io/maven-settings-xml-action@v22
#       #   with:
#       #     plugin_repositories: '[{ "id": "nexus-codehaus-snapshot", "url": "https://oss.sonatype.org/content/repositories/codehaus-snapshots/" }]'
#       - run: mvn --version
#       - run: |
#          ls -l /home/runner/.m2
         
#       - name: Maven test
#         run: |
#           mvn test
#           mvn install
#           ls -l /home/runner/.m2/repository
#           ls -l /home/runner/.m2/repository/org
#           ls -l /home/runner/.m2/repository/org/apache
#           ls -l /home/runner/.m2/repository/org/apache/maven
#           ls -l /home/runner/.m2/repository/org/apache/maven/plugins
#           echo "next"
#           ls -l /home/runner/.m2/repository/com/puppycrawl/tools

      
#       - name: checkstyle
#         run: |
#           ls -l
#           mvn checkstyle:checkstyle

        


name: Hprofile Actions
on: workflow_dispatch

# permissions:
#   contents: read
env:
  AWS_REGION: us-east-1 
  ECR_REPOSITORY: actapp
  ECS_SERVICE: vproapp01-act-svc
  ECS_CLUSTER: vproapp01-act
  ECS_TASK_DEFINITION: aws-files/taskdeffile.json
  CONTAINER_NAME: vproapp


jobs: 
   Testing:
      runs-on: ubuntu-latest
      steps:
        - name: Code checkout
          uses: actions/checkout@v4.2.2

        - name: Maven Test
          run: mvn test
          
        - name: Checkstyle
          run: mvn checkstyle:checkstyle  

        - name: Set Java 11
          uses: actions/setup-java@v4
          with:
            distribution: 'temurin' # See 'Supported distributions' for available options
            java-version: '11'
      
            
        # Setup sonar-scanner
        - name: Setup SonarQube
          uses: warchant/setup-sonar-scanner@v7

        # Run sonar-scanner
        - name: SonarQube Scan
          run: sonar-scanner
             -Dsonar.host.url=${{ vars.SONAR_URL }} 
             -Dsonar.token=${{ secrets.SONAR_TOKEN }} 
             -Dsonar.organization=${{ vars.SONAR_ORGANIZATION }}
             -Dsonar.projectKey=${{ vars.SONAR_PROJECT_KEY }}
             -Dsonar.sources=src/ 
             -Dsonar.junit.reportsPath=target/surefire-reports/
             -Dsonar.jacoco.reportsPath=target/jacoco.exec
             -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
             -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/

        # - name: SonarQube Scan
        #   uses: SonarSource/sonarqube-scan-action@master
        #   with:
        #     args: >
        #       -Dsonar.host.url=${{ vars.SONAR_URL }} 
        #       -Dsonar.token=${{ secrets.SONAR_TOKEN }} 
        #       -Dsonar.organization=${{ vars.SONAR_ORGANIZATION }}
        #       -Dsonar.projectKey=${{ vars.SONAR_PROJECT_KEY }}
        #       -Dsonar.sources=src/ 
        #       -Dsonar.junit.reportsPath=target/surefire-reports/
        #       -Dsonar.jacoco.reportsPath=target/jacoco.exec
        #       -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
        #       -Dsonar.java.binaries=target/test-classes/com/visualpathit/account/controllerTest/


        - run: |
            ls -la
            ls -la target
            ls -la .scannerwork
            cat .scannerwork/report-task.txt

        - name: SonarQube Quality Gate check
          id: sonarqube-quality-gate-check
          uses: sonarsource/sonarqube-quality-gate-action@master
          with:
             pollingTimeoutSec: 600
             scanMetadataReportFile: .scannerwork/report-task.txt
          env:
             SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
             SONAR_HOST_URL: ${{ vars.SONAR_URL }} #OPTIONAL

   BUILD_AND_PUBLISH:
    needs: Testing
    runs-on:  ubuntu-latest
    steps: 
        - name: Code checkout
          uses: actions/checkout@v4.2.2

        - name: Update application.properties file   
          run: | 
            sed -i "s/^jdbc.username.*$/jdbc.username\=${{ secrets.RDS_USER }}/" src/main/resources/application.properties
            sed -i "s/^jdbc.password.*$/jdbc.password\=${{ secrets.RDS_PASS }}/" src/main/resources/application.properties
            sed -i "s/db01/${{ secrets.RDS_ENDPOINT }}/" src/main/resources/application.properties

        - name: upload image to ECR
          uses: appleboy/docker-ecr-action@master
          with:
            access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
            secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            registry: ${{ secrets.REGISTRY }}
            repo: actapp
            region: ${{ env.AWS_REGION }}
            tags: latest,${{ github.run_number }}
            daemon_off: false
            dockerfile: ./Dockerfile
            context: ./
    
   Deploy:
    needs: BUILD_AND_PUBLISH
    runs-on:  ubuntu-latest
    steps: 
        - name: Code checkout
          uses: actions/checkout@v4.2.2

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ env.AWS_REGION }}
    
        - name: Fill in the new image ID in the Amazon ECS task definition
          id: task-def
          uses: aws-actions/amazon-ecs-render-task-definition@v1
          with:
            task-definition: ${{ env.ECS_TASK_DEFINITION }}
            container-name: ${{ env.CONTAINER_NAME }}
            image: ${{ secrets.REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ github.run_number }}
    
        - name: Deploy Amazon ECS task definition
          uses: aws-actions/amazon-ecs-deploy-task-definition@v2
          with:
            task-definition: ${{ steps.task-def.outputs.task-definition }}
            service: ${{ env.ECS_SERVICE }}
            cluster: ${{ env.ECS_CLUSTER }}
            wait-for-service-stability: true